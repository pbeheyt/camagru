const bcrypt = require('bcrypt');
const User = require('../models/User');

async function authenticateUser(username, password) {
  const user = await User.findOne({ where: { username } });
  if (!user) {
    return false;
  }
  const isPasswordValid = await bcrypt.compare(password, user.password);
  return isPasswordValid ? user : false;
}

module.exports = authenticateUser;
function escapeHtml(unsafe) {
    return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
}

module.exports = escapeHtml;
const crypto = require('crypto');

function generateToken() {
	return crypto.randomBytes(20).toString('hex');
}

module.exports = generateToken;function getTokenExpiration() {
	return Date.now() + 3600000; // 1 hour from now
}

module.exports = getTokenExpiration;const authenticateUser = require('./authenticateUser');
const escapeHtml = require('./escapeHtml');
const isValidEmail = require('./isValidEmail');
const isValidPassword = require('./isValidPassword');
const generateToken = require('./generateToken');
const getTokenExpiration = require('./getTokenExpiration');
const sendConfirmationEmail = require('./sendConfirmationEmail');
const sendPasswordResetEmail = require('./sendPasswordResetEmail');

module.exports = {
  authenticateUser,
  escapeHtml,
  generateToken,
  getTokenExpiration,
  isValidEmail,
  isValidPassword,
  sendConfirmationEmail,
  sendPasswordResetEmail,
};
/**
 * Function to validate email address based on RFC 5322 standard.
 * @param {string} email The email address to validate.
 * @returns {boolean} True if the email address is valid, otherwise false.
 */
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}

module.exports = isValidEmail;
/**
 * Function to validate password based on certain criteria.
 * @param {string} password The password to validate.
 * @returns {boolean} True if the password meets the criteria, otherwise false.
 */
function isValidPassword(password) {
    // Password must be at least 8 characters long
    if (password.length < 8) {
        return false;
    }
    // Password must contain at least one uppercase letter
    if (!/[A-Z]/.test(password)) {
        return false;
    }
    // Password must contain at least one lowercase letter
    if (!/[a-z]/.test(password)) {
        return false;
    }
    // Password must contain at least one digit
    if (!/\d/.test(password)) {
        return false;
    }
    // Password must contain at least one special character
    if (!/[!@#$%^&*()_+{}\[\]:;<>,.?/~~\-]/.test(password)) {
        return false;
    }
    return true;
}

module.exports = isValidPassword;
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: 'smtp.gmail.com',
  port: 587,
  secure: false,
  auth: {
    user: process.env.GMAIL_USERNAME,
    pass: process.env.GMAIL_PASS,
  }
});

module.exports = transporter;
const transporter = require('./mailer');

async function sendConfirmationEmail(user, req) {
  // Define email options
  const mailOptions = {
    from: process.env.GMAIL_USERNAME,
    to: user.email,
    subject: 'Account Confirmation',
    html: `
      <div style="background-color: #f5f5f5; font-family: Arial, sans-serif; margin: 0; padding: 0;">
        <div style="background-color: #343a40; color: #ffffff; font-size: 24px; font-weight: bold; line-height: 1.2; padding: 20px; text-align: center;">
          Camagru
        </div>
        <div style="background-color: #ffffff; margin: 0 auto; max-width: 600px; padding: 20px;">
          <div style="font-size: 16px; line-height: 1.5; margin-bottom: 20px;">
            <p>Dear ${user.username},</p>
            <p>Thank you for signing up for Camagru!</p>
            <p>To complete the registration process, please click on the following link to confirm your account:</p>
          </div>
          <div style="background-color: #343a40; color: #ffffff; display: inline-block; font-size: 16px; font-weight: bold; line-height: 1.2; padding: 10px 20px; text-align: center; text-decoration: none;">
            <a href="http://${req.headers.host}/confirm/${user.confirmationToken}" style="color: #ffffff; text-decoration: none;">Confirm Account</a>
          </div>
          <div style="font-size: 16px; line-height: 1.5; margin-top: 20px;">
            <p>If you did not sign up for Camagru, please ignore this email and your account will not be created.</p>
            <p>Best regards,</p>
            <p>The Camagru App</p>
          </div>
        </div>
      </div>
    `
  };

  // Send the email
  await transporter.sendMail(mailOptions);
}

module.exports = sendConfirmationEmail;
const transporter = require('./mailer');

async function sendPasswordResetEmail(user, req) {
  // Define email options
  const mailOptions = {
    from: process.env.GMAIL_USERNAME,
    to: user.email,
    subject: 'Password Reset Request',
    html: `
      <div style="background-color: #f5f5f5; font-family: Arial, sans-serif; margin: 0; padding: 0;">
        <div style="background-color: #343a40; color: #ffffff; font-size: 24px; font-weight: bold; line-height: 1.2; padding: 20px; text-align: center;">
          Camagru
        </div>
        <div style="background-color: #ffffff; margin: 0 auto; max-width: 600px; padding: 20px;">
          <div style="font-size: 16px; line-height: 1.5; margin-bottom: 20px;">
            <p>Dear ${user.username},</p>
            <p>You are receiving this email because you (or someone else) have requested the reset of the password for your Camagru account.</p>
            <p>Please click on the following link to complete the process:</p>
          </div>
          <div style="background-color: #343a40; color: #ffffff; display: inline-block; font-size: 16px; font-weight: bold; line-height: 1.2; padding: 10px 20px; text-align: center; text-decoration: none;">
            <a href="http://${req.headers.host}/reset-password/${user.passwordResetToken}" style="color: #ffffff; text-decoration: none;">Reset Password</a>
          </div>
          <div style="font-size: 16px; line-height: 1.5; margin-top: 20px;">
            <p>If you did not request this, please ignore this email and your password will remain unchanged.</p>
            <p>Best regards,</p>
            <p>The Camagru App</p>
          </div>
        </div>
      </div>
    `
  };

  // Send the email
  await transporter.sendMail(mailOptions);
}

module.exports = sendPasswordResetEmail;
